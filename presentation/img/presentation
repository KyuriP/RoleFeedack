import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import time

# Create a directed graph
G = nx.DiGraph()

# Add nodes (based on your given graph)
nodes = ['anh', 'slp', 'ene', 'app', 'glt', 'con', 'mot', 'sui', 'sad']
G.add_nodes_from(nodes)

# Add edges (as per the graph, you may want to customize these)
edges = [('anh', 'slp'), ('slp', 'ene'), ('ene', 'app'), ('app', 'glt'), 
         ('glt', 'sad'), ('sad', 'glt'), ('glt', 'con'), ('con', 'mot'),
         ('mot', 'sui'), ('sui', 'sad')]

G.add_edges_from(edges)

# Set positions for the nodes
pos = {
    "anh": (1, 3), "slp": (2, 3), "ene": (3, 3), "app": (4, 3),
    "glt": (5, 2), "con": (5, 1), "mot": (4, 1), "sui": (3, 1), "sad": (2, 2)
}

# Function to update the plot with flipped arrows
def update_plot(ax, G, pos, flip_edges=[]):
    ax.clear()  # Clear the current axes
    nx.draw(G, pos, with_labels=True, node_size=3000, node_color="lightgray", 
            font_size=12, font_weight="bold", edge_color='gray', ax=ax)
    
    # Flip the arrows as per flip_edges list
    for edge in flip_edges:
        G[edge[0]][edge[1]]['dir'] = 'none' if G[edge[0]][edge[1]]['dir'] == 'forward' else 'forward'
        
    # Redraw the edges with updated directions
    for edge in G.edges():
        ax.annotate('', xy=pos[edge[1]], xytext=pos[edge[0]], 
                    arrowprops=dict(arrowstyle='->' if G[edge[0]][edge[1]].get('dir', 'forward') == 'forward' else '<-', 
                                    lw=1, color="gray"))
    plt.draw()

# Create the initial plot
fig, ax = plt.subplots(figsize=(8, 6))

# Start the animation
flip_sequence = [(('glt', 'sad'), ('sad', 'glt'))]  # Define which edges to flip

for t in range(10):  # Number of animation steps
    flip_edges = flip_sequence[t % len(flip_sequence)]  # Flip edges periodically
    update_plot(ax, G, pos, flip_edges)
    plt.pause(0.5)  # Pause for animation effect

plt.show()
